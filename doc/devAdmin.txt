# devAdmin.txt
#   To document the daily tasks involved with managing the antweb environments.


--- Compilation ---

# To bring up docker
docker-compose up

docker-compose up --build
  # This will also do an ant build

# To compile
docker-compose exec antweb ant deploy

# To restart tomcat (without rebuilding docker)
docker-compose restart antweb

docker-compose up --build antweb

docker-compose up --build -d

--- Database Stuff ---
  * Some of this old. See below: Loading local Database
#To get into mysql:
docker-compose exec mysql mysql -u antweb -p ant

cd /Users/mark/bak/db
  // move the ant-current to a date stamped backup file

# To get the current database dump from the production server.
scp root@antweb.org:/root/ant-currentDump.sql.gz .
  # /root/ant-currentDump.sql.gz -> /mnt/antweb/backup/db/ant-currentDump.sql.gz 

# To load the database locally
mysqldump -u antweb -p --all-databases --routines --single-transaction --quick | gzip > ant-currentDump.sql.gz
  #docker-compose exec mysql .... ?

# To speed up (optimize). To be run after database load
docker-compose exec mysql sh -c "exec mysqlcheck --all-databases --optimize -u antweb -p"



--- Deployment
-New

cd /root/antweb
git pull
source .env
docker-compose up -d --build

-Old
git pull
docker-compose build    # To see how it goes   ! Long and slow. Failured to build?
docker-compose up -d    # To put changes into effect
tail -f logs/antweb.log 

--- Server Stuff ---

# log in as root
ssh root@antweb.org

# To see log Antweb.log
cd /root/antweb
tail --lines 1000 logs/antweb.log

Location of antweb web accessible data: 
  /mnt/antweb/images/
  /mnt/antweb/web/

From inside the docker (using: 	)
  ls /data/antweb/
  
  
--- Administration ---

# To create a shell in the antweb docker
docker-compose exec antweb bash


--- tomcat configuration ---
cd /Users/mark/antweb/docker/antweb/tomcat/conf


--- Installation notes ---
[install GitKraken, IntelliJ]
As described in README.txt
mkdir $HOME/volumes/
git clone git@github.com:calacademy-research/antweb.git
Open repository in GitKraken. 
  Pull appropriate branch.
ln -sf docker-compose.dev.yml docker-compose.override.yml
Copy over /data directory to antweb/ 
  Using rclone in README.txt or some other means. Copy from another installation?
[in antweb directory] Create the .env file.
  export ANTWEB_BUCKET_PATH=$(pwd)/data
  echo ANTWEB_BUCKET_PATH=$(printenv ANTWEB_BUCKET_PATH) >> .env  
  export ANTWEB_BACKUP_PATH=$HOME/volumes/antweb_backup 
  echo ANTWEB_BACKUP_PATH=$(printenv ANTWEB_BACKUP_PATH) >> .env
* On Mac... Docker - Preferences - Resources - set the Memory to at least 3GB. Maybe 8MB?
  Too low will cause failure of specimen upload as well as: 
    https://localhost/query.do?action=curiousQuery&name=lastSpecimenUpload




### Download the (hopefully soon to be) sanitized database

Create a full database dump from antweb and copy it to your machine

```bash
ssh user@antweb
mysqldump -h 127.0.0.1 -u antweb -p --all-databases --routines --single-transaction --quick --column-statistics=0 | gzip > /tmp/ant-currentDump.sql.gz
# Enter password:

scp user@antweb:/mnt/backup/db/ant-currentDump.sql.gz ./

Better yet: scp root@antweb.org:/mnt/backup/db/ant-currentDump.sql.gz ../bak/db/20210626.sql.gz
 
```

Load the database into docker volume mounted by the mysql container

*Important: Bring down the antweb mysql container if it exists before continuing*

```bash
docker-compose down
docker volume rm antweb_database
docker volume create antweb_database

CID=$(docker run -d --rm \
	-e MYSQL_ALLOW_EMPTY_PASSWORD=1 \
	-e MYSQL_DATABASE=ant \
	--mount source=antweb_database,target=/var/lib/mysql \
	 mysql:5)
	
sleep 15	# Wait for the container to start up. If you get ERROR 2002 (HY000): Can't connect to local MySQL server, keep waiting
gunzip -c ./ant-currentDump.sql.gz | docker exec -i $CID sh -c "exec mysql -uroot ant"

better yet:  gunzip -c ../bak/db/20210626.sql.gz | docker exec -i $CID sh -c "exec mysql -uroot ant"

# Run an optimize to regenerate index
docker exec -it $CID sh -c "exec mysqlcheck --all-databases --analyze -uroot" && docker stop $CID

# If ant-currentDump.sql.gz is in the antweb directory, remove the dump to reduce docker daemon build time
rm ant-currentDump.sql.gz
```

This creates a temporary mysql container and loads the database dump into a docker-managed volume. This volume persists after the container is removed.  It'll take 5-10 minutes for the import to complete. 

\#### After sanitized database is available: create an admin antweb user




 1023  docker volume rm antweb_caddy_1
 1024  docker volume rm antweb_caddy_data
 1025  docker volume create antweb_caddy_data
 1026  docker-compose up -d
 1030  docker-compose exec caddy sh
 
docker-compose logs -f caddy




---Loading local Database (Outdated? See above)

# Fetch and unzip the current database dump from the server. Delete it when finished.

scp root@antweb.org:/root/ant-currentDump.sql.gz .
gunzip ant-currentDump.sql.gz

# Stop mysql before loading database
docker-compose stop mysql

*Process Check and Kill as needed
# If a mysql process is lost (the CID=$(docker run...) it can interfere with the process.
# InnoDB: Check that you do not already have another mysqld process using the same InnoDB data or log files
docker ps -a
  CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                 NAMES
  3a3e63a03e3f   mysql:5   "docker-entrypoint.sâ€¦"   54 minutes ago   Up 54 minutes   3306/tcp, 33060/tcp   wonderful_galileo

# Look for the processes that do not look like "antweb_*". Can kill with abbreviated ID.
docker stop 3a   

docker compose down

# Remove and create database
docker volume remove antweb_database
docker volume create antweb_database

CID=$(docker run -d --rm \
	-e MYSQL_ALLOW_EMPTY_PASSWORD=1 \
	-e MYSQL_DATABASE=ant \
	--mount source=antweb_database,target=/var/lib/mysql \
	 mysql:5)   

#docker exec -i $CID sh -c "exec mysql -uroot ant" < ant-currentDump.sql  
# Better yet, untar in a directory outside of the antweb dir and refer to it, as such:
docker exec -i $CID sh -c "exec mysql -uroot ant" < ../bak/db/2021-06-23.sql

-Repeaat the "*Process Check and Kill as needed" above.
  # docker ps -a
  # docker stop 3a  
    
docker logs -f $CID

docker-compose up --build -d  (-d for daemon [or detached]) (--build to build dockers from scratch)



# Dash suggestion. Not sure how this might be useful.
#To connect to the container via mysql, you need to pass the parameter -h 127.0.0.1 . Otherwise, mysql tries to connect via socket instead of TCP.


--- Necesssary in dev environment?

mkdir /mnt/antweb/web/upload
mkdir /mnt/antweb/web/log/
mkdir /mnt/antweb/web/log/worldants
mkdir /mnt/antweb/web/log/specimen


--- Assorted.

To reference Antweb container specific addresses:
# On server:
  ln -s /mnt/antweb /usr/local/antweb
# On dev machine, something like:
 # Deprecated!
 # sudo ln -s /Users/mark/volumes/antweb/data/ /usr/local/antweb

--- Locations
Antweb directories
  on server: /root/antweb
  on client: /Users/mark/volumes/antweb
  
To see logs:
  docker-compose exec antweb bash
  ls /usr/local/antweb/web/log/
    accessLog.txt  adminTask.log  compute.log  dateDetermined.log  deletedImageLog.txt  detail  getUrl.txt	imageNotFound.txt  logins.txt  messages.txt  notFound.txt  profiler.jsp  searches.txt  specimen  srfExceptions.jsp  taxonSet.log  taxonSetBackup.log  worldants
  ls /data/antweb/log/
    bak  cpuCheck.log  longRequest.log  messages.txt
  ls /usr/local/tomcat/logs
    catalina.out access_logs.
  
These are here:
  ls antweb/logs/detail    antwebEvent.log  googleEarth.log  search.log

  Only these are here: ls /mnt/antweb/web/log    specimen  worldants



More useful - Dash
mark@iMark local % ls -vlah   Natural sort of numbers in text (linux only)
mark@iMark local % ls -lath   time human all list

Staging Server
ssh  root@165.232.136.170
https://165.232.136.170/



